import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { flatfileImporter } from '@flatfile/sdk';
export class FlatfileButtonComponent {
    constructor() {
        this.onInit = new EventEmitter();
        this.onUpload = new EventEmitter();
        this.onLaunch = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onComplete = new EventEmitter();
        this.onError = new EventEmitter();
        this.isImporterLoaded = true;
    }
    ngOnInit() {
        if (!this.token) {
            console.error('ðŸ“¥ Flatfile Importer ERROR - "token" missing via @Input()');
            this.isImporterLoaded = false;
            return;
        }
        if (typeof flatfileImporter === 'undefined') {
            console.log('ðŸ“¥ Flatfile Importer ERROR - importer failed to load');
            this.isImporterLoaded = false;
            return;
        }
        this.flatfileImporter = flatfileImporter(this.token, Object.assign(Object.assign({}, (this.mountUrl ? { mountUrl: this.mountUrl } : {})), (this.apiUrl ? { apiUrl: this.apiUrl } : {})));
        this.flatfileImporter.on('init', (res) => this.onInit.next(res));
        this.flatfileImporter.on('upload', (res) => this.onUpload.next(res));
        this.flatfileImporter.on('launch', (res) => this.onLaunch.next(res));
        this.flatfileImporter.on('close', (res) => this.onClose.next(res));
        this.flatfileImporter.on('complete', (res) => this.onComplete.next(res));
    }
    ngOnDestroy() {
        this.flatfileImporter.close();
    }
    launch() {
        this.flatfileImporter.launch().catch((e) => {
            this.onError.next({ error: e });
        });
    }
}
FlatfileButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'flatfile-button',
                template: `
    <button (click)="launch()" [disabled]="!isImporterLoaded">
      <div #ref [class.hide]="!isImporterLoaded">
        <ng-content></ng-content>
      </div>
      <span *ngIf="!ref && !ref.innerHTML.trim() && isImporterLoaded"
        >ðŸ”¼ Upload with Flatfile</span
      >
      <span *ngIf="!isImporterLoaded">
        ðŸ…§ Failed to Load Flatfile Importer
      </span>
    </button>
  `,
                styles: [`
      .hide {
        display: none;
      }
    `]
            },] }
];
FlatfileButtonComponent.propDecorators = {
    token: [{ type: Input }],
    mountUrl: [{ type: Input }],
    apiUrl: [{ type: Input }],
    onInit: [{ type: Output }],
    onUpload: [{ type: Output }],
    onLaunch: [{ type: Output }],
    onClose: [{ type: Output }],
    onComplete: [{ type: Output }],
    onError: [{ type: Output }],
    ref: [{ type: ViewChild, args: ['ref', { read: ElementRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdGZpbGUtYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWFya3BpZXN6YWsvRG9jdW1lbnRzL1RyaWxvbi9DTElFTlRTL2ZsYXRmaWxlL2FuZ3VsYXItYWRhcHRlci9wcm9qZWN0cy9hbmd1bGFyLWFkYXB0ZXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2ZsYXRmaWxlLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBOEIsTUFBTSxlQUFlLENBQUM7QUF5QjdFLE1BQU0sT0FBTyx1QkFBdUI7SUF2QnBDO1FBMkJZLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQztRQUM3QyxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQXFCLENBQUM7UUFDakQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDO1FBQ2pELFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUMvQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7UUFDckQsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO1FBSXpELHFCQUFnQixHQUFZLElBQUksQ0FBQztJQXdDbkMsQ0FBQztJQXBDUSxRQUFRO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixPQUFPLENBQUMsS0FBSyxDQUNYLDJEQUEyRCxDQUM1RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztZQUM5QixPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sZ0JBQWdCLEtBQUssV0FBVyxFQUFFO1lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0RBQXNELENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxrQ0FDOUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUNsRCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQy9DLENBQUM7UUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU07UUFDWCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBUSxFQUFFLEVBQUU7WUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTNFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7R0FZVDt5QkFFQzs7OztLQUlDO2FBRUo7OztvQkFFRSxLQUFLO3VCQUNMLEtBQUs7cUJBQ0wsS0FBSztxQkFDTCxNQUFNO3VCQUNOLE1BQU07dUJBQ04sTUFBTTtzQkFDTixNQUFNO3lCQUNOLE1BQU07c0JBQ04sTUFBTTtrQkFFTixTQUFTLFNBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBmbGF0ZmlsZUltcG9ydGVyLCBJRXZlbnRzLCBJRmxhdGZpbGVJbXBvcnRlciB9IGZyb20gJ0BmbGF0ZmlsZS9zZGsnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmbGF0ZmlsZS1idXR0b24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxidXR0b24gKGNsaWNrKT1cImxhdW5jaCgpXCIgW2Rpc2FibGVkXT1cIiFpc0ltcG9ydGVyTG9hZGVkXCI+XG4gICAgICA8ZGl2ICNyZWYgW2NsYXNzLmhpZGVdPVwiIWlzSW1wb3J0ZXJMb2FkZWRcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9kaXY+XG4gICAgICA8c3BhbiAqbmdJZj1cIiFyZWYgJiYgIXJlZi5pbm5lckhUTUwudHJpbSgpICYmIGlzSW1wb3J0ZXJMb2FkZWRcIlxuICAgICAgICA+8J+UvCBVcGxvYWQgd2l0aCBGbGF0ZmlsZTwvc3BhblxuICAgICAgPlxuICAgICAgPHNwYW4gKm5nSWY9XCIhaXNJbXBvcnRlckxvYWRlZFwiPlxuICAgICAgICDwn4WnIEZhaWxlZCB0byBMb2FkIEZsYXRmaWxlIEltcG9ydGVyXG4gICAgICA8L3NwYW4+XG4gICAgPC9idXR0b24+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5oaWRlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICBgLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBGbGF0ZmlsZUJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdG9rZW46IHN0cmluZztcbiAgQElucHV0KCkgbW91bnRVcmw/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFwaVVybD86IHN0cmluZztcbiAgQE91dHB1dCgpIG9uSW5pdCA9IG5ldyBFdmVudEVtaXR0ZXI8SUV2ZW50c1snaW5pdCddPigpO1xuICBAT3V0cHV0KCkgb25VcGxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPElFdmVudHNbJ3VwbG9hZCddPigpO1xuICBAT3V0cHV0KCkgb25MYXVuY2ggPSBuZXcgRXZlbnRFbWl0dGVyPElFdmVudHNbJ2xhdW5jaCddPigpO1xuICBAT3V0cHV0KCkgb25DbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8SUV2ZW50c1snY2xvc2UnXT4oKTtcbiAgQE91dHB1dCgpIG9uQ29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPElFdmVudHNbJ2NvbXBsZXRlJ10+KCk7XG4gIEBPdXRwdXQoKSBvbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxJRXZlbnRzWydlcnJvciddPigpO1xuXG4gIEBWaWV3Q2hpbGQoJ3JlZicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIHJlZjogRWxlbWVudFJlZjtcblxuICBpc0ltcG9ydGVyTG9hZGVkOiBib29sZWFuID0gdHJ1ZTtcblxuICBwcml2YXRlIGZsYXRmaWxlSW1wb3J0ZXI6IElGbGF0ZmlsZUltcG9ydGVyO1xuXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudG9rZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICfwn5OlIEZsYXRmaWxlIEltcG9ydGVyIEVSUk9SIC0gXCJ0b2tlblwiIG1pc3NpbmcgdmlhIEBJbnB1dCgpJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuaXNJbXBvcnRlckxvYWRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmxhdGZpbGVJbXBvcnRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OlIEZsYXRmaWxlIEltcG9ydGVyIEVSUk9SIC0gaW1wb3J0ZXIgZmFpbGVkIHRvIGxvYWQnKTtcbiAgICAgIHRoaXMuaXNJbXBvcnRlckxvYWRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZmxhdGZpbGVJbXBvcnRlciA9IGZsYXRmaWxlSW1wb3J0ZXIodGhpcy50b2tlbiwge1xuICAgICAgLi4uKHRoaXMubW91bnRVcmwgPyB7IG1vdW50VXJsOiB0aGlzLm1vdW50VXJsIH0gOiB7fSksXG4gICAgICAuLi4odGhpcy5hcGlVcmwgPyB7IGFwaVVybDogdGhpcy5hcGlVcmwgfSA6IHt9KSxcbiAgICB9KTtcblxuICAgIHRoaXMuZmxhdGZpbGVJbXBvcnRlci5vbignaW5pdCcsIChyZXMpID0+IHRoaXMub25Jbml0Lm5leHQocmVzKSk7XG4gICAgdGhpcy5mbGF0ZmlsZUltcG9ydGVyLm9uKCd1cGxvYWQnLCAocmVzKSA9PiB0aGlzLm9uVXBsb2FkLm5leHQocmVzKSk7XG4gICAgdGhpcy5mbGF0ZmlsZUltcG9ydGVyLm9uKCdsYXVuY2gnLCAocmVzKSA9PiB0aGlzLm9uTGF1bmNoLm5leHQocmVzKSk7XG4gICAgdGhpcy5mbGF0ZmlsZUltcG9ydGVyLm9uKCdjbG9zZScsIChyZXMpID0+IHRoaXMub25DbG9zZS5uZXh0KHJlcykpO1xuICAgIHRoaXMuZmxhdGZpbGVJbXBvcnRlci5vbignY29tcGxldGUnLCAocmVzKSA9PiB0aGlzLm9uQ29tcGxldGUubmV4dChyZXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmZsYXRmaWxlSW1wb3J0ZXIuY2xvc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBsYXVuY2goKTogdm9pZCB7XG4gICAgdGhpcy5mbGF0ZmlsZUltcG9ydGVyLmxhdW5jaCgpLmNhdGNoKChlOiBFcnJvcikgPT4ge1xuICAgICAgdGhpcy5vbkVycm9yLm5leHQoeyBlcnJvcjogZSB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19