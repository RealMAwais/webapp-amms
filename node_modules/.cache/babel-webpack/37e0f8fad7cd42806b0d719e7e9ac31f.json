{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Admin/Desktop/Web Developement Course/ANGULAR/employeeapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { employeeData } from './employee.model';\nimport { ngxCsv } from 'ngx-csv';\nlet EmployeeDashboardComponent = class EmployeeDashboardComponent {\n  //------------------------------GLOBAL VARIABLES END HERE----------------------//\n  constructor(fb, ApiService, fireStoreDb, storage) {\n    this.fb = fb;\n    this.ApiService = ApiService;\n    this.fireStoreDb = fireStoreDb;\n    this.storage = storage; //--------------GLOBAL VARIABLES DECLARED HERE---------------------------------//\n\n    this.employeeModelObject = new employeeData();\n    this.buttonText = 'Submit';\n    this.myLocalArray = [];\n    this.formattedArray = {};\n    this.sortingOrder = 'ascending';\n    this.loader = true; // ---------------------------------------------//Edit Employee Method//---------------------------------------------//\n\n    this.editForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      phone: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      address: new FormControl('', [Validators.required]),\n      picture: new FormControl('', Validators.required)\n    }); //----------------------------NEW EMPLOYEE FORM START HERE--------------------//\n\n    this.employeeForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      phone: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      address: new FormControl('', Validators.required),\n      picture: new FormControl('', Validators.required)\n    }); //----------------------------NEW EMPLOYEE FORM END HERE--------------------//\n  }\n\n  ngOnInit() {\n    this.getAllData(); //get data from firestore API call\n  }\n\n  get f() {\n    return this.employeeForm.controls;\n  }\n\n  addFile(event) {\n    this.selectedFile = event.target.files[0];\n  } // ------------------------UPLOAD IMAGE + DATA TO FIREBASE STORAGE START HERE------------------------------------------//\n\n\n  uploadDataoFireStorage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var uploadedImage = Date.now();\n      const filePath = `employeeImages/${uploadedImage}`;\n      const snap = yield _this.storage.upload(filePath, _this.selectedFile);\n\n      _this.geturl(snap);\n    })();\n  }\n\n  geturl(snap) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = yield snap.ref.getDownloadURL();\n      _this2.url = url;\n\n      if (url) {\n        let userObject = _this2.employeeForm.value;\n        userObject['picture'] = url;\n\n        const id = _this2.fireStoreDb.createId();\n\n        userObject['id'] = id;\n\n        _this2.ApiService.addUser(userObject);\n\n        _this2.employeeForm.reset();\n      }\n    })();\n  } /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // ----------------------------------------------------//Delete Method//-----------------------------------------------//\n\n\n  deleteEmployee(deleteIndexId) {\n    this.ApiService.deleteUser(deleteIndexId);\n  } // ----------------------------------------------------//GET Method//-----------------------------------------------//\n\n\n  getAllData() {\n    this.ApiService.getEmployees().subscribe(jsonData => {\n      this.myLocalArray = jsonData;\n    });\n  }\n\n  onEdit(id) {\n    const mySelectedIndexFilter = this.myLocalArray.filter(data => data.id === id);\n    this.editForm.setValue({\n      name: mySelectedIndexFilter[0].name,\n      phone: mySelectedIndexFilter[0].phone,\n      email: mySelectedIndexFilter[0].email,\n      address: mySelectedIndexFilter[0].address,\n      picture: mySelectedIndexFilter[0].picture\n    });\n    this.base64Image = mySelectedIndexFilter[0].picture;\n    this.editableId = id;\n  } //----------------------------------------------------//Update Method//------------------------------------------------//\n\n\n  onUpdate() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var uploadedImage = Date.now();\n      const filePath = `employeeImages/${uploadedImage}`;\n      const snap = yield _this3.storage.upload(filePath, _this3.selectedFile);\n\n      _this3.getUrlForImage(snap);\n    })();\n  }\n\n  getUrlForImage(snap) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = yield snap.ref.getDownloadURL();\n\n      if (url) {\n        const userObject = _this4.editForm.value;\n        debugger;\n        userObject.id = _this4.editableId;\n        userObject['picture'] = url; // it will upload my picture on same index\n\n        _this4.ApiService.updateUser(userObject, _this4.editableId);\n\n        _this4.editForm.reset();\n      }\n    })();\n  } //--------------------------------------SELECT FILE FOR UPLOAD----------------------------------------------------//\n\n\n  selectFile(event) {\n    let uploadedFile = event.target.files[0];\n    let reader = new FileReader();\n    reader.readAsText(uploadedFile);\n\n    reader.onload = e => {\n      let csv = reader.result;\n      this.convertCsvToArray(csv);\n    };\n  } //---------------------------------------------Convert to Array-------------------------------------------//\n\n\n  convertCsvToArray(csvString) {\n    var arrayLines = csvString.split('\\r\\n');\n    var headerValues = arrayLines[0].split(/,/);\n    var dataValues = arrayLines.splice(1).map(function (dataLine) {\n      return dataLine.split(/,/);\n    });\n    let formattedArray = dataValues.map(function (rowValues) {\n      var row = {};\n      headerValues.forEach(function (headerValues, index) {\n        row[headerValues] = index <= rowValues.length ? rowValues[index] : null;\n      });\n      return row;\n    });\n    var nonEmptyArray = formattedArray.filter(nonEmptyArrayValue => {\n      if (nonEmptyArrayValue.name && nonEmptyArrayValue.email) return nonEmptyArrayValue;\n    });\n    this.formattedArray = nonEmptyArray;\n  }\n\n  uploadFileBtn() {\n    this.formattedArray.every(element => {\n      const id = this.fireStoreDb.createId();\n      element['id'] = id;\n      this.ApiService.addUser(element);\n      return true;\n    });\n  } //----------------------------------------Export CSV Method here--------------------------------------------//\n\n\n  exportCSV() {\n    var options = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalseparator: '.',\n      showLabels: true,\n      showTitle: true,\n      title: 'Company Employee Details',\n      useBom: true,\n      noDownload: false,\n      headers: [\"Name\", \"Email\", \"Phone\", \"Address\", \"Id\", \"Picture\"]\n    };\n    new ngxCsv(this.myLocalArray, \"EmployeeReport\", options);\n  } //--------------RESET METHOD-----------------//\n\n\n  resetForm() {\n    this.employeeForm.reset();\n  } //--------------SORTING METHOD-----------------//\n\n\n  sortArray(property, order) {\n    if (order == 'ascending') {\n      this.myLocalArray.sort((a, b) => b[property] > a[property] ? -1 : 1);\n      this.sortingOrder = 'descending';\n    } else {\n      this.myLocalArray.sort((a, b) => b[property] > a[property] ? 1 : -1);\n      this.sortingOrder = 'ascending';\n    }\n  }\n\n};\nEmployeeDashboardComponent = __decorate([Component({\n  selector: 'app-employee-dashboard',\n  templateUrl: './employee-dashboard.component.html',\n  styleUrls: ['./employee-dashboard.component.css']\n})], EmployeeDashboardComponent);\nexport { EmployeeDashboardComponent };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Web Developement Course/ANGULAR/employeeapp/src/app/employee-dashboard/employee-dashboard.component.ts"],"names":["__decorate","Component","FormGroup","FormControl","Validators","employeeData","ngxCsv","EmployeeDashboardComponent","constructor","fb","ApiService","fireStoreDb","storage","employeeModelObject","buttonText","myLocalArray","formattedArray","sortingOrder","loader","editForm","name","required","phone","email","pattern","address","picture","employeeForm","ngOnInit","getAllData","f","controls","addFile","event","selectedFile","target","files","uploadDataoFireStorage","uploadedImage","Date","now","filePath","snap","upload","geturl","url","ref","getDownloadURL","userObject","value","id","createId","addUser","reset","deleteEmployee","deleteIndexId","deleteUser","getEmployees","subscribe","jsonData","onEdit","mySelectedIndexFilter","filter","data","setValue","base64Image","editableId","onUpdate","getUrlForImage","updateUser","selectFile","uploadedFile","reader","FileReader","readAsText","onload","e","csv","result","convertCsvToArray","csvString","arrayLines","split","headerValues","dataValues","splice","map","dataLine","rowValues","row","forEach","index","length","nonEmptyArray","nonEmptyArrayValue","uploadFileBtn","every","element","exportCSV","options","fieldSeparator","quoteStrings","decimalseparator","showLabels","showTitle","title","useBom","noDownload","headers","resetForm","sortArray","property","order","sort","a","b","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,QAAmD,gBAAnD;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,IAAIC,0BAA0B,GAAG,MAAMA,0BAAN,CAAiC;AAC9D;AACAC,EAAAA,WAAW,CAACC,EAAD,EAAKC,UAAL,EAAiBC,WAAjB,EAA8BC,OAA9B,EAAuC;AAC9C,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf,CAJ8C,CAK9C;;AACA,SAAKC,mBAAL,GAA2B,IAAIR,YAAJ,EAA3B;AACA,SAAKS,UAAL,GAAkB,QAAlB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,YAAL,GAAoB,WAApB;AACA,SAAKC,MAAL,GAAc,IAAd,CAX8C,CAY9C;;AACA,SAAKC,QAAL,GAAgB,IAAIjB,SAAJ,CAAc;AAC1BkB,MAAAA,IAAI,EAAE,IAAIjB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B,CADoB;AAE1BC,MAAAA,KAAK,EAAE,IAAInB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B,CAFmB;AAG1BE,MAAAA,KAAK,EAAE,IAAIpB,WAAJ,CAAgB,EAAhB,EAAoB,CAACC,UAAU,CAACiB,QAAZ,EAAsBjB,UAAU,CAACoB,OAAX,CAAmB,2CAAnB,CAAtB,CAApB,CAHmB;AAI1BC,MAAAA,OAAO,EAAE,IAAItB,WAAJ,CAAgB,EAAhB,EAAoB,CAACC,UAAU,CAACiB,QAAZ,CAApB,CAJiB;AAK1BK,MAAAA,OAAO,EAAE,IAAIvB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B;AALiB,KAAd,CAAhB,CAb8C,CAoB9C;;AACA,SAAKM,YAAL,GAAoB,IAAIzB,SAAJ,CAAc;AAC9BkB,MAAAA,IAAI,EAAE,IAAIjB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B,CADwB;AAE9BC,MAAAA,KAAK,EAAE,IAAInB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B,CAFuB;AAG9BE,MAAAA,KAAK,EAAE,IAAIpB,WAAJ,CAAgB,EAAhB,EAAoB,CAACC,UAAU,CAACiB,QAAZ,EAAsBjB,UAAU,CAACoB,OAAX,CAAmB,2CAAnB,CAAtB,CAApB,CAHuB;AAI9BC,MAAAA,OAAO,EAAE,IAAItB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B,CAJqB;AAK9BK,MAAAA,OAAO,EAAE,IAAIvB,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAACiB,QAA/B;AALqB,KAAd,CAApB,CArB8C,CA4B9C;AACH;;AACDO,EAAAA,QAAQ,GAAG;AACP,SAAKC,UAAL,GADO,CACY;AACtB;;AACI,MAADC,CAAC,GAAG;AACJ,WAAO,KAAKH,YAAL,CAAkBI,QAAzB;AACH;;AACDC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,SAAKC,YAAL,GAAoBD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB;AACH,GAxC6D,CAyC9D;;;AACMC,EAAAA,sBAAsB,GAAG;AAAA;;AAAA;AAC3B,UAAIC,aAAa,GAAGC,IAAI,CAACC,GAAL,EAApB;AACA,YAAMC,QAAQ,GAAI,kBAAiBH,aAAc,EAAjD;AACA,YAAMI,IAAI,SAAS,KAAI,CAAC9B,OAAL,CAAa+B,MAAb,CAAoBF,QAApB,EAA8B,KAAI,CAACP,YAAnC,CAAnB;;AACA,MAAA,KAAI,CAACU,MAAL,CAAYF,IAAZ;AAJ2B;AAK9B;;AACKE,EAAAA,MAAM,CAACF,IAAD,EAAO;AAAA;;AAAA;AACf,YAAMG,GAAG,SAASH,IAAI,CAACI,GAAL,CAASC,cAAT,EAAlB;AACA,MAAA,MAAI,CAACF,GAAL,GAAWA,GAAX;;AACA,UAAIA,GAAJ,EAAS;AACL,YAAIG,UAAU,GAAG,MAAI,CAACrB,YAAL,CAAkBsB,KAAnC;AACAD,QAAAA,UAAU,CAAC,SAAD,CAAV,GAAwBH,GAAxB;;AACA,cAAMK,EAAE,GAAG,MAAI,CAACvC,WAAL,CAAiBwC,QAAjB,EAAX;;AACAH,QAAAA,UAAU,CAAC,IAAD,CAAV,GAAmBE,EAAnB;;AACA,QAAA,MAAI,CAACxC,UAAL,CAAgB0C,OAAhB,CAAwBJ,UAAxB;;AACA,QAAA,MAAI,CAACrB,YAAL,CAAkB0B,KAAlB;AACH;AAVc;AAWlB,GA3D6D,CA4D9D;AACA;;;AACAC,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC1B,SAAK7C,UAAL,CAAgB8C,UAAhB,CAA2BD,aAA3B;AACH,GAhE6D,CAiE9D;;;AACA1B,EAAAA,UAAU,GAAG;AACT,SAAKnB,UAAL,CAAgB+C,YAAhB,GAA+BC,SAA/B,CAA0CC,QAAD,IAAc;AACnD,WAAK5C,YAAL,GAAoB4C,QAApB;AACH,KAFD;AAGH;;AACDC,EAAAA,MAAM,CAACV,EAAD,EAAK;AACP,UAAMW,qBAAqB,GAAG,KAAK9C,YAAL,CAAkB+C,MAAlB,CAA0BC,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYA,EAA/C,CAA9B;AACA,SAAK/B,QAAL,CAAc6C,QAAd,CAAuB;AACnB5C,MAAAA,IAAI,EAAEyC,qBAAqB,CAAC,CAAD,CAArB,CAAyBzC,IADZ;AAEnBE,MAAAA,KAAK,EAAEuC,qBAAqB,CAAC,CAAD,CAArB,CAAyBvC,KAFb;AAGnBC,MAAAA,KAAK,EAAEsC,qBAAqB,CAAC,CAAD,CAArB,CAAyBtC,KAHb;AAInBE,MAAAA,OAAO,EAAEoC,qBAAqB,CAAC,CAAD,CAArB,CAAyBpC,OAJf;AAKnBC,MAAAA,OAAO,EAAEmC,qBAAqB,CAAC,CAAD,CAArB,CAAyBnC;AALf,KAAvB;AAOA,SAAKuC,WAAL,GAAmBJ,qBAAqB,CAAC,CAAD,CAArB,CAAyBnC,OAA5C;AACA,SAAKwC,UAAL,GAAkBhB,EAAlB;AACH,GAlF6D,CAmF9D;;;AACMiB,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,UAAI7B,aAAa,GAAGC,IAAI,CAACC,GAAL,EAApB;AACA,YAAMC,QAAQ,GAAI,kBAAiBH,aAAc,EAAjD;AACA,YAAMI,IAAI,SAAS,MAAI,CAAC9B,OAAL,CAAa+B,MAAb,CAAoBF,QAApB,EAA8B,MAAI,CAACP,YAAnC,CAAnB;;AACA,MAAA,MAAI,CAACkC,cAAL,CAAoB1B,IAApB;AAJa;AAKhB;;AACK0B,EAAAA,cAAc,CAAC1B,IAAD,EAAO;AAAA;;AAAA;AACvB,YAAMG,GAAG,SAASH,IAAI,CAACI,GAAL,CAASC,cAAT,EAAlB;;AACA,UAAIF,GAAJ,EAAS;AACL,cAAMG,UAAU,GAAG,MAAI,CAAC7B,QAAL,CAAc8B,KAAjC;AACA;AACAD,QAAAA,UAAU,CAACE,EAAX,GAAgB,MAAI,CAACgB,UAArB;AACAlB,QAAAA,UAAU,CAAC,SAAD,CAAV,GAAwBH,GAAxB,CAJK,CAIwB;;AAC7B,QAAA,MAAI,CAACnC,UAAL,CAAgB2D,UAAhB,CAA2BrB,UAA3B,EAAuC,MAAI,CAACkB,UAA5C;;AACA,QAAA,MAAI,CAAC/C,QAAL,CAAckC,KAAd;AACH;AATsB;AAU1B,GApG6D,CAqG9D;;;AACAiB,EAAAA,UAAU,CAACrC,KAAD,EAAQ;AACd,QAAIsC,YAAY,GAAGtC,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAnB;AACA,QAAIoC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,IAAAA,MAAM,CAACE,UAAP,CAAkBH,YAAlB;;AACAC,IAAAA,MAAM,CAACG,MAAP,GAAiBC,CAAD,IAAO;AACnB,UAAIC,GAAG,GAAGL,MAAM,CAACM,MAAjB;AACA,WAAKC,iBAAL,CAAuBF,GAAvB;AACH,KAHD;AAIH,GA9G6D,CA+G9D;;;AACAE,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AACzB,QAAIC,UAAU,GAAGD,SAAS,CAACE,KAAV,CAAgB,MAAhB,CAAjB;AACA,QAAIC,YAAY,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAcC,KAAd,CAAoB,GAApB,CAAnB;AACA,QAAIE,UAAU,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,EAAqBC,GAArB,CAAyB,UAAUC,QAAV,EAAoB;AAAE,aAAOA,QAAQ,CAACL,KAAT,CAAe,GAAf,CAAP;AAA6B,KAA5E,CAAjB;AACA,QAAIlE,cAAc,GAAGoE,UAAU,CAACE,GAAX,CAAe,UAAUE,SAAV,EAAqB;AACrD,UAAIC,GAAG,GAAG,EAAV;AACAN,MAAAA,YAAY,CAACO,OAAb,CAAqB,UAAUP,YAAV,EAAwBQ,KAAxB,EAA+B;AAChDF,QAAAA,GAAG,CAACN,YAAD,CAAH,GAAqBQ,KAAK,IAAIH,SAAS,CAACI,MAApB,GAA8BJ,SAAS,CAACG,KAAD,CAAvC,GAAiD,IAArE;AACH,OAFD;AAGA,aAAOF,GAAP;AACH,KANoB,CAArB;AAOA,QAAII,aAAa,GAAG7E,cAAc,CAAC8C,MAAf,CAAuBgC,kBAAD,IAAwB;AAC9D,UAAIA,kBAAkB,CAAC1E,IAAnB,IAA2B0E,kBAAkB,CAACvE,KAAlD,EACI,OAAOuE,kBAAP;AACP,KAHmB,CAApB;AAIA,SAAK9E,cAAL,GAAsB6E,aAAtB;AACH;;AACDE,EAAAA,aAAa,GAAG;AACZ,SAAK/E,cAAL,CAAoBgF,KAApB,CAA2BC,OAAD,IAAa;AACnC,YAAM/C,EAAE,GAAG,KAAKvC,WAAL,CAAiBwC,QAAjB,EAAX;AACA8C,MAAAA,OAAO,CAAC,IAAD,CAAP,GAAgB/C,EAAhB;AACA,WAAKxC,UAAL,CAAgB0C,OAAhB,CAAwB6C,OAAxB;AACA,aAAO,IAAP;AACH,KALD;AAMH,GAxI6D,CAyI9D;;;AACAC,EAAAA,SAAS,GAAG;AACR,QAAIC,OAAO,GAAG;AACVC,MAAAA,cAAc,EAAE,GADN;AAEVC,MAAAA,YAAY,EAAE,GAFJ;AAGVC,MAAAA,gBAAgB,EAAE,GAHR;AAIVC,MAAAA,UAAU,EAAE,IAJF;AAKVC,MAAAA,SAAS,EAAE,IALD;AAMVC,MAAAA,KAAK,EAAE,0BANG;AAOVC,MAAAA,MAAM,EAAE,IAPE;AAQVC,MAAAA,UAAU,EAAE,KARF;AASVC,MAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,SAA3B,EAAsC,IAAtC,EAA4C,SAA5C;AATC,KAAd;AAWA,QAAItG,MAAJ,CAAW,KAAKS,YAAhB,EAA8B,gBAA9B,EAAgDoF,OAAhD;AACH,GAvJ6D,CAwJ9D;;;AACAU,EAAAA,SAAS,GAAG;AACR,SAAKlF,YAAL,CAAkB0B,KAAlB;AACH,GA3J6D,CA4J9D;;;AACAyD,EAAAA,SAAS,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACvB,QAAIA,KAAK,IAAI,WAAb,EAA0B;AACtB,WAAKjG,YAAL,CAAkBkG,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACJ,QAAD,CAAD,GAAcG,CAAC,CAACH,QAAD,CAAf,GAA4B,CAAC,CAA7B,GAAiC,CAAlE;AACA,WAAK9F,YAAL,GAAoB,YAApB;AACH,KAHD,MAIK;AACD,WAAKF,YAAL,CAAkBkG,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACJ,QAAD,CAAD,GAAcG,CAAC,CAACH,QAAD,CAAf,GAA4B,CAA5B,GAAgC,CAAC,CAAlE;AACA,WAAK9F,YAAL,GAAoB,WAApB;AACH;AACJ;;AAtK6D,CAAlE;AAwKAV,0BAA0B,GAAGP,UAAU,CAAC,CACpCC,SAAS,CAAC;AACNmH,EAAAA,QAAQ,EAAE,wBADJ;AAENC,EAAAA,WAAW,EAAE,qCAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,oCAAD;AAHL,CAAD,CAD2B,CAAD,EAMpC/G,0BANoC,CAAvC;AAOA,SAASA,0BAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { employeeData } from './employee.model';\r\nimport { ngxCsv } from 'ngx-csv';\r\nlet EmployeeDashboardComponent = class EmployeeDashboardComponent {\r\n    //------------------------------GLOBAL VARIABLES END HERE----------------------//\r\n    constructor(fb, ApiService, fireStoreDb, storage) {\r\n        this.fb = fb;\r\n        this.ApiService = ApiService;\r\n        this.fireStoreDb = fireStoreDb;\r\n        this.storage = storage;\r\n        //--------------GLOBAL VARIABLES DECLARED HERE---------------------------------//\r\n        this.employeeModelObject = new employeeData;\r\n        this.buttonText = 'Submit';\r\n        this.myLocalArray = [];\r\n        this.formattedArray = {};\r\n        this.sortingOrder = 'ascending';\r\n        this.loader = true;\r\n        // ---------------------------------------------//Edit Employee Method//---------------------------------------------//\r\n        this.editForm = new FormGroup({\r\n            name: new FormControl('', Validators.required),\r\n            phone: new FormControl('', Validators.required),\r\n            email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\r\n            address: new FormControl('', [Validators.required]),\r\n            picture: new FormControl('', Validators.required)\r\n        });\r\n        //----------------------------NEW EMPLOYEE FORM START HERE--------------------//\r\n        this.employeeForm = new FormGroup({\r\n            name: new FormControl('', Validators.required),\r\n            phone: new FormControl('', Validators.required),\r\n            email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\r\n            address: new FormControl('', Validators.required),\r\n            picture: new FormControl('', Validators.required)\r\n        });\r\n        //----------------------------NEW EMPLOYEE FORM END HERE--------------------//\r\n    }\r\n    ngOnInit() {\r\n        this.getAllData(); //get data from firestore API call\r\n    }\r\n    get f() {\r\n        return this.employeeForm.controls;\r\n    }\r\n    addFile(event) {\r\n        this.selectedFile = event.target.files[0];\r\n    }\r\n    // ------------------------UPLOAD IMAGE + DATA TO FIREBASE STORAGE START HERE------------------------------------------//\r\n    async uploadDataoFireStorage() {\r\n        var uploadedImage = Date.now();\r\n        const filePath = `employeeImages/${uploadedImage}`;\r\n        const snap = await this.storage.upload(filePath, this.selectedFile);\r\n        this.geturl(snap);\r\n    }\r\n    async geturl(snap) {\r\n        const url = await snap.ref.getDownloadURL();\r\n        this.url = url;\r\n        if (url) {\r\n            let userObject = this.employeeForm.value;\r\n            userObject['picture'] = url;\r\n            const id = this.fireStoreDb.createId();\r\n            userObject['id'] = id;\r\n            this.ApiService.addUser(userObject);\r\n            this.employeeForm.reset();\r\n        }\r\n    }\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // ----------------------------------------------------//Delete Method//-----------------------------------------------//\r\n    deleteEmployee(deleteIndexId) {\r\n        this.ApiService.deleteUser(deleteIndexId);\r\n    }\r\n    // ----------------------------------------------------//GET Method//-----------------------------------------------//\r\n    getAllData() {\r\n        this.ApiService.getEmployees().subscribe((jsonData) => {\r\n            this.myLocalArray = jsonData;\r\n        });\r\n    }\r\n    onEdit(id) {\r\n        const mySelectedIndexFilter = this.myLocalArray.filter((data) => data.id === id);\r\n        this.editForm.setValue({\r\n            name: mySelectedIndexFilter[0].name,\r\n            phone: mySelectedIndexFilter[0].phone,\r\n            email: mySelectedIndexFilter[0].email,\r\n            address: mySelectedIndexFilter[0].address,\r\n            picture: mySelectedIndexFilter[0].picture\r\n        });\r\n        this.base64Image = mySelectedIndexFilter[0].picture;\r\n        this.editableId = id;\r\n    }\r\n    //----------------------------------------------------//Update Method//------------------------------------------------//\r\n    async onUpdate() {\r\n        var uploadedImage = Date.now();\r\n        const filePath = `employeeImages/${uploadedImage}`;\r\n        const snap = await this.storage.upload(filePath, this.selectedFile);\r\n        this.getUrlForImage(snap);\r\n    }\r\n    async getUrlForImage(snap) {\r\n        const url = await snap.ref.getDownloadURL();\r\n        if (url) {\r\n            const userObject = this.editForm.value;\r\n            debugger;\r\n            userObject.id = this.editableId;\r\n            userObject['picture'] = url; // it will upload my picture on same index\r\n            this.ApiService.updateUser(userObject, this.editableId);\r\n            this.editForm.reset();\r\n        }\r\n    }\r\n    //--------------------------------------SELECT FILE FOR UPLOAD----------------------------------------------------//\r\n    selectFile(event) {\r\n        let uploadedFile = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.readAsText(uploadedFile);\r\n        reader.onload = (e) => {\r\n            let csv = reader.result;\r\n            this.convertCsvToArray(csv);\r\n        };\r\n    }\r\n    //---------------------------------------------Convert to Array-------------------------------------------//\r\n    convertCsvToArray(csvString) {\r\n        var arrayLines = csvString.split('\\r\\n');\r\n        var headerValues = arrayLines[0].split(/,/);\r\n        var dataValues = arrayLines.splice(1).map(function (dataLine) { return dataLine.split(/,/); });\r\n        let formattedArray = dataValues.map(function (rowValues) {\r\n            var row = {};\r\n            headerValues.forEach(function (headerValues, index) {\r\n                row[headerValues] = (index <= rowValues.length) ? rowValues[index] : null;\r\n            });\r\n            return row;\r\n        });\r\n        var nonEmptyArray = formattedArray.filter((nonEmptyArrayValue) => {\r\n            if (nonEmptyArrayValue.name && nonEmptyArrayValue.email)\r\n                return nonEmptyArrayValue;\r\n        });\r\n        this.formattedArray = nonEmptyArray;\r\n    }\r\n    uploadFileBtn() {\r\n        this.formattedArray.every((element) => {\r\n            const id = this.fireStoreDb.createId();\r\n            element['id'] = id;\r\n            this.ApiService.addUser(element);\r\n            return true;\r\n        });\r\n    }\r\n    //----------------------------------------Export CSV Method here--------------------------------------------//\r\n    exportCSV() {\r\n        var options = {\r\n            fieldSeparator: ',',\r\n            quoteStrings: '\"',\r\n            decimalseparator: '.',\r\n            showLabels: true,\r\n            showTitle: true,\r\n            title: 'Company Employee Details',\r\n            useBom: true,\r\n            noDownload: false,\r\n            headers: [\"Name\", \"Email\", \"Phone\", \"Address\", \"Id\", \"Picture\"]\r\n        };\r\n        new ngxCsv(this.myLocalArray, \"EmployeeReport\", options);\r\n    }\r\n    //--------------RESET METHOD-----------------//\r\n    resetForm() {\r\n        this.employeeForm.reset();\r\n    }\r\n    //--------------SORTING METHOD-----------------//\r\n    sortArray(property, order) {\r\n        if (order == 'ascending') {\r\n            this.myLocalArray.sort((a, b) => b[property] > a[property] ? -1 : 1);\r\n            this.sortingOrder = 'descending';\r\n        }\r\n        else {\r\n            this.myLocalArray.sort((a, b) => b[property] > a[property] ? 1 : -1);\r\n            this.sortingOrder = 'ascending';\r\n        }\r\n    }\r\n};\r\nEmployeeDashboardComponent = __decorate([\r\n    Component({\r\n        selector: 'app-employee-dashboard',\r\n        templateUrl: './employee-dashboard.component.html',\r\n        styleUrls: ['./employee-dashboard.component.css']\r\n    })\r\n], EmployeeDashboardComponent);\r\nexport { EmployeeDashboardComponent };\r\n"]},"metadata":{},"sourceType":"module"}