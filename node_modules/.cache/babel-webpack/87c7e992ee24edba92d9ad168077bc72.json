{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Admin/Desktop/Web Developement Course/ANGULAR/employeeapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { employeeData } from './employee.model';\nimport { ngxCsv } from 'ngx-csv';\nimport { editForm } from '../editForm/editform.component';\nlet employeeForm = class employeeForm {\n  //------------------------------GLOBAL VARIABLES END HERE----------------------//\n  constructor(fb, ApiService, fireStoreDb, storage, editForm) {\n    this.fb = fb;\n    this.ApiService = ApiService;\n    this.fireStoreDb = fireStoreDb;\n    this.storage = storage;\n    this.editForm = editForm; //--------------GLOBAL VARIABLES DECLARED HERE---------------------------------//\n\n    this.employeeModelObject = new employeeData();\n    this.buttonText = 'Submit';\n    this.myLocalArray = [];\n    this.formattedArray = {};\n    this.sortingOrder = 'ascending'; //----------------------------NEW EMPLOYEE FORM START HERE--------------------//\n\n    this.employeeForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      phone: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\n      address: new FormControl('', Validators.required),\n      picture: new FormControl('', Validators.required)\n    }); //----------------------------NEW EMPLOYEE FORM END HERE--------------------//\n  }\n\n  ngOnInit() {\n    this.ApiService.ngxServiceLoader();\n    this.getAllData(); //get data from firestore API call\n  }\n\n  get f() {\n    return this.employeeForm.controls;\n  } // ------------------------UPLOAD IMAGE + DATA TO FIREBASE STORAGE START HERE------------------------------------------//\n\n\n  uploadDataoFireStorage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.ApiService.ngxServiceLoader();\n\n      var uploadedImage = Date.now();\n      const filePath = `employeeImages/${uploadedImage}`;\n      const snap = yield _this.storage.upload(filePath, _this.selectedFile);\n\n      _this.geturl(snap);\n    })();\n  }\n\n  geturl(snap) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = yield snap.ref.getDownloadURL();\n      _this2.url = url;\n\n      if (url) {\n        let userObject = _this2.employeeForm.value;\n        userObject['picture'] = url;\n\n        const id = _this2.fireStoreDb.createId();\n\n        userObject['id'] = id;\n\n        _this2.ApiService.addUser(userObject);\n\n        _this2.employeeForm.reset();\n      }\n    })();\n  } /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // ----------------------------------------------------//Delete Method//-----------------------------------------------//\n\n\n  deleteEmployee(deleteIndexId) {\n    this.ApiService.ngxServiceLoader();\n    this.ApiService.deleteUser(deleteIndexId);\n  } // ----------------------------------------------------//GET Method//-----------------------------------------------//\n\n\n  getAllData() {\n    this.ApiService.getEmployees().subscribe(jsonData => {\n      this.myLocalArray = jsonData;\n    });\n  } //--------------------------------------SELECT FILE FOR UPLOAD----------------------------------------------------//\n\n\n  selectFile(event) {\n    this.ApiService.ngxServiceLoader();\n    let uploadedFile = event.target.files[0];\n    let reader = new FileReader();\n    reader.readAsText(uploadedFile);\n\n    reader.onload = e => {\n      let csv = reader.result;\n      this.convertCsvToArray(csv);\n    };\n  } //---------------------------------------------Convert to Array-------------------------------------------//\n\n\n  convertCsvToArray(csvString) {\n    var arrayLines = csvString.split('\\r\\n');\n    var headerValues = arrayLines[0].split(/,/);\n    var dataValues = arrayLines.splice(1).map(function (dataLine) {\n      return dataLine.split(/,/);\n    });\n    let formattedArray = dataValues.map(function (rowValues) {\n      var row = {};\n      headerValues.forEach(function (headerValues, index) {\n        row[headerValues] = index <= rowValues.length ? rowValues[index] : null;\n      });\n      return row;\n    });\n    var nonEmptyArray = formattedArray.filter(nonEmptyArrayValue => {\n      if (nonEmptyArrayValue.name && nonEmptyArrayValue.email) return nonEmptyArrayValue;\n    });\n    this.formattedArray = nonEmptyArray;\n  }\n\n  uploadFileBtn() {\n    this.ApiService.ngxServiceLoader();\n    this.formattedArray.every(element => {\n      const id = this.fireStoreDb.createId();\n      element['id'] = id;\n      this.ApiService.addUser(element);\n      return true;\n    });\n  } //----------------------------------------Export CSV Method here--------------------------------------------//\n\n\n  exportCSV() {\n    var options = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalseparator: '.',\n      showLabels: true,\n      showTitle: true,\n      title: 'Company Employee Details',\n      useBom: true,\n      noDownload: false,\n      headers: [\"Name\", \"Email\", \"Phone\", \"Address\", \"Id\", \"Picture\"]\n    };\n    new ngxCsv(this.myLocalArray, \"EmployeeReport\", options);\n  } //--------------RESET METHOD-----------------//\n\n\n  resetForm() {\n    this.employeeForm.reset();\n  } //--------------SORTING METHOD-----------------//\n\n\n  sortArray(property, order) {\n    if (order == 'ascending') {\n      this.myLocalArray.sort((a, b) => b[property] > a[property] ? -1 : 1);\n      this.sortingOrder = 'descending';\n    } else {\n      this.myLocalArray.sort((a, b) => b[property] > a[property] ? 1 : -1);\n      this.sortingOrder = 'ascending';\n    }\n  }\n\n};\n\n__decorate([Input('editForm')], employeeForm.prototype, \"inData\", void 0);\n\n__decorate([ViewChild(editForm, {\n  static: true\n})], employeeForm.prototype, \"child\", void 0);\n\nemployeeForm = __decorate([Component({\n  selector: 'employeeForm',\n  templateUrl: './employeeForm.html',\n  styleUrls: ['./employeeForm.css']\n})], employeeForm);\nexport { employeeForm };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Web Developement Course/ANGULAR/employeeapp/src/app/employeeForm/employeeForm.ts"],"names":["__decorate","Component","Input","ViewChild","FormGroup","FormControl","Validators","employeeData","ngxCsv","editForm","employeeForm","constructor","fb","ApiService","fireStoreDb","storage","employeeModelObject","buttonText","myLocalArray","formattedArray","sortingOrder","name","required","phone","email","pattern","address","picture","ngOnInit","ngxServiceLoader","getAllData","f","controls","uploadDataoFireStorage","uploadedImage","Date","now","filePath","snap","upload","selectedFile","geturl","url","ref","getDownloadURL","userObject","value","id","createId","addUser","reset","deleteEmployee","deleteIndexId","deleteUser","getEmployees","subscribe","jsonData","selectFile","event","uploadedFile","target","files","reader","FileReader","readAsText","onload","e","csv","result","convertCsvToArray","csvString","arrayLines","split","headerValues","dataValues","splice","map","dataLine","rowValues","row","forEach","index","length","nonEmptyArray","filter","nonEmptyArrayValue","uploadFileBtn","every","element","exportCSV","options","fieldSeparator","quoteStrings","decimalseparator","showLabels","showTitle","title","useBom","noDownload","headers","resetForm","sortArray","property","order","sort","a","b","prototype","static","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, Input, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { employeeData } from './employee.model';\r\nimport { ngxCsv } from 'ngx-csv';\r\nimport { editForm } from '../editForm/editform.component';\r\nlet employeeForm = class employeeForm {\r\n    //------------------------------GLOBAL VARIABLES END HERE----------------------//\r\n    constructor(fb, ApiService, fireStoreDb, storage, editForm) {\r\n        this.fb = fb;\r\n        this.ApiService = ApiService;\r\n        this.fireStoreDb = fireStoreDb;\r\n        this.storage = storage;\r\n        this.editForm = editForm;\r\n        //--------------GLOBAL VARIABLES DECLARED HERE---------------------------------//\r\n        this.employeeModelObject = new employeeData;\r\n        this.buttonText = 'Submit';\r\n        this.myLocalArray = [];\r\n        this.formattedArray = {};\r\n        this.sortingOrder = 'ascending';\r\n        //----------------------------NEW EMPLOYEE FORM START HERE--------------------//\r\n        this.employeeForm = new FormGroup({\r\n            name: new FormControl('', Validators.required),\r\n            phone: new FormControl('', Validators.required),\r\n            email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]),\r\n            address: new FormControl('', Validators.required),\r\n            picture: new FormControl('', Validators.required)\r\n        });\r\n        //----------------------------NEW EMPLOYEE FORM END HERE--------------------//\r\n    }\r\n    ngOnInit() {\r\n        this.ApiService.ngxServiceLoader();\r\n        this.getAllData(); //get data from firestore API call\r\n    }\r\n    get f() {\r\n        return this.employeeForm.controls;\r\n    }\r\n    // ------------------------UPLOAD IMAGE + DATA TO FIREBASE STORAGE START HERE------------------------------------------//\r\n    async uploadDataoFireStorage() {\r\n        this.ApiService.ngxServiceLoader();\r\n        var uploadedImage = Date.now();\r\n        const filePath = `employeeImages/${uploadedImage}`;\r\n        const snap = await this.storage.upload(filePath, this.selectedFile);\r\n        this.geturl(snap);\r\n    }\r\n    async geturl(snap) {\r\n        const url = await snap.ref.getDownloadURL();\r\n        this.url = url;\r\n        if (url) {\r\n            let userObject = this.employeeForm.value;\r\n            userObject['picture'] = url;\r\n            const id = this.fireStoreDb.createId();\r\n            userObject['id'] = id;\r\n            this.ApiService.addUser(userObject);\r\n            this.employeeForm.reset();\r\n        }\r\n    }\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // ----------------------------------------------------//Delete Method//-----------------------------------------------//\r\n    deleteEmployee(deleteIndexId) {\r\n        this.ApiService.ngxServiceLoader();\r\n        this.ApiService.deleteUser(deleteIndexId);\r\n    }\r\n    // ----------------------------------------------------//GET Method//-----------------------------------------------//\r\n    getAllData() {\r\n        this.ApiService.getEmployees().subscribe((jsonData) => {\r\n            this.myLocalArray = jsonData;\r\n        });\r\n    }\r\n    //--------------------------------------SELECT FILE FOR UPLOAD----------------------------------------------------//\r\n    selectFile(event) {\r\n        this.ApiService.ngxServiceLoader();\r\n        let uploadedFile = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.readAsText(uploadedFile);\r\n        reader.onload = (e) => {\r\n            let csv = reader.result;\r\n            this.convertCsvToArray(csv);\r\n        };\r\n    }\r\n    //---------------------------------------------Convert to Array-------------------------------------------//\r\n    convertCsvToArray(csvString) {\r\n        var arrayLines = csvString.split('\\r\\n');\r\n        var headerValues = arrayLines[0].split(/,/);\r\n        var dataValues = arrayLines.splice(1).map(function (dataLine) { return dataLine.split(/,/); });\r\n        let formattedArray = dataValues.map(function (rowValues) {\r\n            var row = {};\r\n            headerValues.forEach(function (headerValues, index) {\r\n                row[headerValues] = (index <= rowValues.length) ? rowValues[index] : null;\r\n            });\r\n            return row;\r\n        });\r\n        var nonEmptyArray = formattedArray.filter((nonEmptyArrayValue) => {\r\n            if (nonEmptyArrayValue.name && nonEmptyArrayValue.email)\r\n                return nonEmptyArrayValue;\r\n        });\r\n        this.formattedArray = nonEmptyArray;\r\n    }\r\n    uploadFileBtn() {\r\n        this.ApiService.ngxServiceLoader();\r\n        this.formattedArray.every((element) => {\r\n            const id = this.fireStoreDb.createId();\r\n            element['id'] = id;\r\n            this.ApiService.addUser(element);\r\n            return true;\r\n        });\r\n    }\r\n    //----------------------------------------Export CSV Method here--------------------------------------------//\r\n    exportCSV() {\r\n        var options = {\r\n            fieldSeparator: ',',\r\n            quoteStrings: '\"',\r\n            decimalseparator: '.',\r\n            showLabels: true,\r\n            showTitle: true,\r\n            title: 'Company Employee Details',\r\n            useBom: true,\r\n            noDownload: false,\r\n            headers: [\"Name\", \"Email\", \"Phone\", \"Address\", \"Id\", \"Picture\"]\r\n        };\r\n        new ngxCsv(this.myLocalArray, \"EmployeeReport\", options);\r\n    }\r\n    //--------------RESET METHOD-----------------//\r\n    resetForm() {\r\n        this.employeeForm.reset();\r\n    }\r\n    //--------------SORTING METHOD-----------------//\r\n    sortArray(property, order) {\r\n        if (order == 'ascending') {\r\n            this.myLocalArray.sort((a, b) => b[property] > a[property] ? -1 : 1);\r\n            this.sortingOrder = 'descending';\r\n        }\r\n        else {\r\n            this.myLocalArray.sort((a, b) => b[property] > a[property] ? 1 : -1);\r\n            this.sortingOrder = 'ascending';\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input('editForm')\r\n], employeeForm.prototype, \"inData\", void 0);\r\n__decorate([\r\n    ViewChild(editForm, { static: true })\r\n], employeeForm.prototype, \"child\", void 0);\r\nemployeeForm = __decorate([\r\n    Component({\r\n        selector: 'employeeForm',\r\n        templateUrl: './employeeForm.html',\r\n        styleUrls: ['./employeeForm.css']\r\n    })\r\n], employeeForm);\r\nexport { employeeForm };\r\n"]},"metadata":{},"sourceType":"module"}